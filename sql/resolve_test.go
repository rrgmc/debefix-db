package sql

import (
	"context"
	"os"
	"testing"

	"github.com/rrgmc/debefix/v2"
	"gotest.tools/v3/assert"
)

var (
	tableTags     = debefix.TableName("public.tags")
	tablePosts    = debefix.TableName("public.posts")
	tablePostTags = debefix.TableName("public.post_tags")
)

func ExampleResolve() {
	ctx := context.Background()
	data := debefix.NewData()

	tableTags := debefix.TableName("public.tags")
	tableUsers := debefix.TableName("public.users")
	tablePosts := debefix.TableName("public.posts")
	tablePostTags := debefix.TableName("public.post_tags")

	data.AddValues(tableTags,
		debefix.MapValues{
			// this field value will be generated at resolve time, for example as a database autoincrement.
			"tag_id": debefix.ResolveValueResolve(),
			// sets the RefID to be targeted by `ValueRefID(tableTags, "go", "tag_id")`. Field is not added to the row values.
			"_refid": debefix.SetValueRefID("go"),
			"name":   "Go",
			// set the value as the resolver base time plus 1 hour.
			"created_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(1)),
			"updated_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(1)),
		},
		debefix.MapValues{
			"tag_id":     debefix.ResolveValueResolve(),
			"_refid":     debefix.SetValueRefID("javascript"),
			"name":       "JavaScript",
			"created_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(1), debefix.WithAddMinutes(2)),
			"updated_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(1), debefix.WithAddMinutes(2)),
		},
		debefix.MapValues{
			"tag_id":     debefix.ResolveValueResolve(),
			"_refid":     debefix.SetValueRefID("cpp"),
			"name":       "C++",
			"created_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(1), debefix.WithAddMinutes(2)),
			"updated_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(1), debefix.WithAddMinutes(2)),
		},
	)

	data.AddValues(tableUsers,
		debefix.MapValues{
			"user_id": 1, // fixed ID, not generated by the database
			// sets the RefID to be targeted by `ValueRefID(tableUsers, "johndoe", "user_id")`. Field is not added to the row values.
			"_refid":     debefix.SetValueRefID("johndoe"),
			"name":       "John Doe",
			"email":      "john@example.com",
			"created_at": debefix.ValueBaseTimeAdd(debefix.WithAddMinutes(30)),
			"updated_at": debefix.ValueBaseTimeAdd(debefix.WithAddMinutes(30)),
		},
		debefix.MapValues{
			"user_id":    2,
			"_refid":     debefix.SetValueRefID("janedoe"),
			"name":       "Jane Doe",
			"email":      "jane@example.com",
			"created_at": debefix.ValueBaseTimeAdd(debefix.WithAddMinutes(30)),
			"updated_at": debefix.ValueBaseTimeAdd(debefix.WithAddMinutes(30)),
		},
	)

	// AddWithID returns an internal ID reference that can be used later.
	post1IID := data.AddWithID(tablePosts,
		debefix.MapValues{
			"post_id": debefix.ValueUUIDRandom(), // generates a random UUID value.
			"title":   "First post",
			"text":    "This is the text of the first post",
			// returns the value of the "user_id" field of the row with the "johndoe" RefID in the tableUsers table.
			// this also adds a dependency between "posts" and "users", so "users" will always be resolved before "posts".
			"user_id":    debefix.ValueRefID(tableUsers, "johndoe", "user_id"),
			"created_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(2)),
			"updated_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(2)),
		})
	post2IID := data.AddWithID(tablePosts,
		debefix.MapValues{
			"post_id": debefix.ValueUUIDRandom(), // generates a random UUID value.
			// data is inserted in the order they were added, so it is possible to reference another row in the same table.
			"parent_post_id": post1IID.ValueForField("post_id"),
			"title":          "Second post",
			"text":           "This is the text of the second post",
			"user_id":        debefix.ValueRefID(tableUsers, "johndoe", "user_id"),
			"created_at":     debefix.ValueBaseTimeAdd(debefix.WithAddHours(2)),
			"updated_at":     debefix.ValueBaseTimeAdd(debefix.WithAddHours(2)),
		},
	)

	data.AddValues(debefix.TableName(tablePostTags),
		debefix.MapValues{
			// returns the value of the "post_id" field of the row referenced by "post1IID", after it was resolved.
			"post_id": post1IID.ValueForField("post_id"),
			// tag_id is generated by the database, so the value will be resolved before being set here.
			"tag_id": debefix.ValueRefID(tableTags, "go", "tag_id"),
		},
		debefix.MapValues{
			"post_id": post1IID.ValueForField("post_id"),
			"tag_id":  debefix.ValueRefID(tableTags, "cpp", "tag_id"),
		},
		debefix.MapValues{
			// returns the value of the "post_id" field of the row referenced by "post2IID", after it was resolved.
			"post_id": post2IID.ValueForField("post_id"),
			"tag_id":  debefix.ValueRefID(tableTags, "javascript", "tag_id"),
		},
	)

	if data.Err() != nil {
		panic(data.Err())
	}

	// outputs all generated queries
	qi := NewDebugQueryInterface(os.Stdout)

	// resolve the rows using a SQL query resolver.
	_, err := debefix.Resolve(ctx, data,
		ResolveFunc(qi, NewQueryBuilder(DefaultQueryBuilderDialect{})))
	if err != nil {
		panic(err)
	}

	// =============== public.tags ===============
	// INSERT INTO public.tags (created_at, name, updated_at) VALUES (?, ?, ?) RETURNING tag_id
	// $$ ARGS: [0:"2024-11-28 11:59:29.61896 -0300 -03 m=+3600.002892251"] [1:"Go"] [2:"2024-11-28 11:59:29.61896 -0300 -03 m=+3600.002892251"]
	// --------------------INSERT INTO public.tags (created_at, name, updated_at) VALUES (?, ?, ?) RETURNING tag_id
	// $$ ARGS: [0:"2024-11-28 12:01:29.61896 -0300 -03 m=+3720.002892251"] [1:"JavaScript"] [2:"2024-11-28 12:01:29.61896 -0300 -03 m=+3720.002892251"]
	// --------------------INSERT INTO public.tags (created_at, name, updated_at) VALUES (?, ?, ?) RETURNING tag_id
	// $$ ARGS: [0:"2024-11-28 12:01:29.61896 -0300 -03 m=+3720.002892251"] [1:"C++"] [2:"2024-11-28 12:01:29.61896 -0300 -03 m=+3720.002892251"]
	// =============== public.users ===============
	// INSERT INTO public.users (created_at, email, name, updated_at, user_id) VALUES (?, ?, ?, ?, ?)
	// $$ ARGS: [0:"2024-11-28 11:29:29.61896 -0300 -03 m=+1800.002892251"] [1:"john@example.com"] [2:"John Doe"] [3:"2024-11-28 11:29:29.61896 -0300 -03 m=+1800.002892251"] [4:"1"]
	// --------------------INSERT INTO public.users (created_at, email, name, updated_at, user_id) VALUES (?, ?, ?, ?, ?)
	// $$ ARGS: [0:"2024-11-28 11:29:29.61896 -0300 -03 m=+1800.002892251"] [1:"jane@example.com"] [2:"Jane Doe"] [3:"2024-11-28 11:29:29.61896 -0300 -03 m=+1800.002892251"] [4:"2"]
	// =============== public.posts ===============
	// INSERT INTO public.posts (created_at, post_id, text, title, updated_at, user_id) VALUES (?, ?, ?, ?, ?, ?)
	// $$ ARGS: [0:"2024-11-28 12:59:29.61896 -0300 -03 m=+7200.002892251"] [1:"8fe25018-1d15-41ff-9a63-f34844835112"] [2:"This is the text of the first post"] [3:"First post"] [4:"2024-11-28 12:59:29.61896 -0300 -03 m=+7200.002892251"] [5:"1"]
	// --------------------INSERT INTO public.posts (created_at, parent_post_id, post_id, text, title, updated_at, user_id) VALUES (?, ?, ?, ?, ?, ?, ?)
	// $$ ARGS: [0:"2024-11-28 12:59:29.61896 -0300 -03 m=+7200.002892251"] [1:"8fe25018-1d15-41ff-9a63-f34844835112"] [2:"68ebab1a-0126-4658-9694-c46d98f23cb7"] [3:"This is the text of the second post"] [4:"Second post"] [5:"2024-11-28 12:59:29.61896 -0300 -03 m=+7200.002892251"] [6:"1"]
	// =============== public.post_tags ===============
	// INSERT INTO public.post_tags (post_id, tag_id) VALUES (?, ?)
	// $$ ARGS: [0:"8fe25018-1d15-41ff-9a63-f34844835112"] [1:"93f3120c-ac6d-47d6-b7a4-66c92ffa5c0a"]
	// --------------------INSERT INTO public.post_tags (post_id, tag_id) VALUES (?, ?)
	// $$ ARGS: [0:"8fe25018-1d15-41ff-9a63-f34844835112"] [1:"44fcb6e4-5f81-4ae6-a5e4-e9e4767de6d1"]
	// --------------------INSERT INTO public.post_tags (post_id, tag_id) VALUES (?, ?)
	// $$ ARGS: [0:"68ebab1a-0126-4658-9694-c46d98f23cb7"] [1:"1f5127cb-1004-4081-a179-d33195fd5fac"]
}

func TestResolve(t *testing.T) {
	data := debefix.NewData()

	data.AddValues(tableTags,
		debefix.MapValues{
			"tag_id":   2,
			"_refid":   debefix.SetValueRefID("all"),
			"tag_name": "All",
		},
		debefix.MapValues{
			"tag_id":   5,
			"_refid":   debefix.SetValueRefID("half"),
			"tag_name": "Half",
		},
	)

	data.AddValues(tablePosts,
		debefix.MapValues{
			"post_id": 1,
			"_refid":  debefix.SetValueRefID("post_1"),
			"title":   "First post",
		},
		debefix.MapValues{
			"post_id": 2,
			"_refid":  debefix.SetValueRefID("post_2"),
			"title":   "Second post",
		},
	)

	data.AddDependencies(tablePosts, tableTags)

	data.AddValues(debefix.TableName(tablePostTags),
		debefix.MapValues{
			"post_id": debefix.ValueRefID(tablePosts, "post_1", "post_id"),
			"tag_id":  debefix.ValueRefID(tableTags, "all", "tag_id"),
		},
		debefix.MapValues{
			"post_id": debefix.ValueRefID(tablePosts, "post_2", "post_id"),
			"tag_id":  debefix.ValueRefID(tableTags, "half", "tag_id"),
		},
	)

	type sqlQuery struct {
		SQL  string
		Args []any
	}

	expectedQueryList := []sqlQuery{
		{
			SQL:  `INSERT INTO public.tags (tag_id, tag_name) VALUES (?, ?)`,
			Args: []any{2, "All"},
		},
		{
			SQL:  `INSERT INTO public.tags (tag_id, tag_name) VALUES (?, ?)`,
			Args: []any{5, "Half"},
		},
		{
			SQL:  `INSERT INTO public.posts (post_id, title) VALUES (?, ?)`,
			Args: []any{1, "First post"},
		},
		{
			SQL:  `INSERT INTO public.posts (post_id, title) VALUES (?, ?)`,
			Args: []any{2, "Second post"},
		},
		{
			SQL:  `INSERT INTO public.post_tags (post_id, tag_id) VALUES (?, ?)`,
			Args: []any{1, 2},
		},
		{
			SQL:  `INSERT INTO public.post_tags (post_id, tag_id) VALUES (?, ?)`,
			Args: []any{2, 5},
		},
	}

	ctx := context.Background()

	var queryList []sqlQuery

	_, err := debefix.Resolve(ctx, data, ResolveFunc(
		QueryInterfaceFunc(func(ctx context.Context, tableID debefix.TableID, query string, returnFieldNames []string, args ...any) (map[string]any, error) {
			queryList = append(queryList, sqlQuery{
				SQL:  query,
				Args: args,
			})
			return nil, nil
		}), NewQueryBuilder(DefaultQueryBuilderDialect{})))
	assert.NilError(t, err)

	assert.DeepEqual(t, expectedQueryList, queryList)
}

func TestResolveGenerated(t *testing.T) {
	data := debefix.NewData()

	data.AddValues(tableTags,
		debefix.MapValues{
			"tag_id":   debefix.ResolveValueResolve(),
			"_refid":   debefix.SetValueRefID("all"),
			"tag_name": "All",
		},
		debefix.MapValues{
			"tag_id":   debefix.ResolveValueResolve(),
			"_refid":   debefix.SetValueRefID("half"),
			"tag_name": "Half",
		},
	)

	data.AddValues(tablePosts,
		debefix.MapValues{
			"post_id": 1,
			"_refid":  debefix.SetValueRefID("post_1"),
			"title":   "First post",
		},
		debefix.MapValues{
			"post_id": 2,
			"_refid":  debefix.SetValueRefID("post_2"),
			"title":   "Second post",
		},
	)

	data.AddDependencies(tablePosts, tableTags)

	data.AddValues(tablePostTags,
		debefix.MapValues{
			"post_id": debefix.ValueRefID(tablePosts, "post_1", "post_id"),
			"tag_id":  debefix.ValueRefID(tableTags, "all", "tag_id"),
		},
		debefix.MapValues{
			"post_id": debefix.ValueRefID(tablePosts, "post_2", "post_id"),
			"tag_id":  debefix.ValueRefID(tableTags, "half", "tag_id"),
		},
	)

	type sqlQuery struct {
		SQL  string
		Args []any
	}

	expectedQueryList := []sqlQuery{
		{
			SQL:  `INSERT INTO public.tags (tag_name) VALUES (?) RETURNING tag_id`,
			Args: []any{"All"},
		},
		{
			SQL:  `INSERT INTO public.tags (tag_name) VALUES (?) RETURNING tag_id`,
			Args: []any{"Half"},
		},
		{
			SQL:  `INSERT INTO public.posts (post_id, title) VALUES (?, ?)`,
			Args: []any{1, "First post"},
		},
		{
			SQL:  `INSERT INTO public.posts (post_id, title) VALUES (?, ?)`,
			Args: []any{2, "Second post"},
		},
		{
			SQL:  `INSERT INTO public.post_tags (post_id, tag_id) VALUES (?, ?)`,
			Args: []any{1, 116},
		},
		{
			SQL:  `INSERT INTO public.post_tags (post_id, tag_id) VALUES (?, ?)`,
			Args: []any{2, 117},
		},
	}

	ctx := context.Background()

	retTagID := 115

	var queryList []sqlQuery

	_, err := debefix.Resolve(ctx, data, ResolveFunc(
		QueryInterfaceFunc(func(ctx context.Context, tableID debefix.TableID, query string, returnFieldNames []string, args ...any) (map[string]any, error) {
			queryList = append(queryList, sqlQuery{
				SQL:  query,
				Args: args,
			})

			ret := map[string]any{}
			for _, rf := range returnFieldNames {
				if rf == "tag_id" {
					retTagID++
					ret["tag_id"] = retTagID
				}
			}

			return ret, nil
		}), NewQueryBuilder(DefaultQueryBuilderDialect{})))
	assert.NilError(t, err)
	assert.DeepEqual(t, expectedQueryList, queryList)
}

func TestResolveUpdate(t *testing.T) {
	data := debefix.NewData()

	tagIID := data.AddWithID(tableTags,
		debefix.MapValues{
			"tag_id":   2,
			"_refid":   debefix.SetValueRefID("all"),
			"tag_name": "All",
		},
	).ValueForField("tag_id")

	data.Update(tagIID.UpdateQuery([]string{"tag_id"}),
		debefix.UpdateActionSetValues{Values: debefix.MapValues{
			"tag_name": "All updated",
		}})

	data.Add(tablePosts,
		debefix.MapValues{
			"post_id": 1,
			"_refid":  debefix.SetValueRefID("post_1"),
			"title":   "First post",
			"tag_id":  debefix.ValueRefID(tableTags, "all", "tag_id"),
		},
	)

	type sqlQuery struct {
		SQL  string
		Args []any
	}

	expectedQueryList := []sqlQuery{
		{
			SQL:  `INSERT INTO public.tags (tag_id, tag_name) VALUES (?, ?)`,
			Args: []any{2, "All"},
		},
		{
			SQL:  `INSERT INTO public.posts (post_id, tag_id, title) VALUES (?, ?, ?)`,
			Args: []any{1, 2, "First post"},
		},
		{
			SQL:  `UPDATE public.tags SET tag_name = ? WHERE tag_id = ?`,
			Args: []any{"All updated", 2},
		},
	}

	ctx := context.Background()

	var queryList []sqlQuery

	_, err := debefix.Resolve(ctx, data, ResolveFunc(
		QueryInterfaceFunc(func(ctx context.Context, tableID debefix.TableID, query string, returnFieldNames []string, args ...any) (map[string]any, error) {
			queryList = append(queryList, sqlQuery{
				SQL:  query,
				Args: args,
			})
			return nil, nil
		}), NewQueryBuilder(DefaultQueryBuilderDialect{})))
	assert.NilError(t, err)

	assert.DeepEqual(t, expectedQueryList, queryList)
}

func TestResolveUpdateOrder(t *testing.T) {
	data := debefix.NewData()

	tagsIID := data.AddWithID(tableTags,
		debefix.MapValues{
			"tag_id":   2,
			"_refid":   debefix.SetValueRefID("all"),
			"tag_name": "All",
		},
	)

	data.UpdateAfter(tagsIID,
		tagsIID.UpdateQuery([]string{"tag_id"}),
		debefix.UpdateActionSetValues{Values: debefix.MapValues{
			"tag_name": "All updated",
		}})

	data.Add(tablePosts,
		debefix.MapValues{
			"post_id": 1,
			"_refid":  debefix.SetValueRefID("post_1"),
			"title":   "First post",
			"tag_id":  debefix.ValueRefID(tableTags, "all", "tag_id"),
		},
	)

	type sqlQuery struct {
		SQL  string
		Args []any
	}

	expectedQueryList := []sqlQuery{
		{
			SQL:  `INSERT INTO public.tags (tag_id, tag_name) VALUES (?, ?)`,
			Args: []any{2, "All"},
		},
		{
			SQL:  `UPDATE public.tags SET tag_name = ? WHERE tag_id = ?`,
			Args: []any{"All updated", 2},
		},
		{
			SQL:  `INSERT INTO public.posts (post_id, tag_id, title) VALUES (?, ?, ?)`,
			Args: []any{1, 2, "First post"},
		},
	}

	ctx := context.Background()

	var queryList []sqlQuery

	_, err := debefix.Resolve(ctx, data, ResolveFunc(
		QueryInterfaceFunc(func(ctx context.Context, tableID debefix.TableID, query string, returnFieldNames []string, args ...any) (map[string]any, error) {
			queryList = append(queryList, sqlQuery{
				SQL:  query,
				Args: args,
			})
			return nil, nil
		}), NewQueryBuilder(DefaultQueryBuilderDialect{})))
	assert.NilError(t, err)

	assert.DeepEqual(t, expectedQueryList, queryList)
}
